#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int data);
int height(Node* root);
int diameterUtil(Node* root, int* diameter);

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

int height(Node* root) {
    if (root == NULL) {
        return 0;
    }

    int leftHeight = height(root->left);
    int rightHeight = height(root->right);

    return 1 + (leftHeight > rightHeight ? leftHeight : rightHeight);
}

int diameterUtil(Node* root, int* diameter) {
    if (root == NULL) {
        return 0;
    }

    int leftHeight = diameterUtil(root->left, diameter);
    int rightHeight = diameterUtil(root->right, diameter);


    int currentDiameter = leftHeight + rightHeight + 1;
    if (currentDiameter > *diameter) {
        *diameter = currentDiameter;
    }

    return 1 + (leftHeight > rightHeight ? leftHeight : rightHeight);
}

int diameter(Node* root) {
    int diameter = 0;
    diameterUtil(root, &diameter);
    return diameter;
}

int main() {
    Node* root = createNode(50);
    root->left = createNode(30);
    root->right = createNode(70);
    root->left->left = createNode(20);
    root->left->right = createNode(40);
    root->right->left = createNode(60);
    root->right->right = createNode(80);

    int treeDiameter = diameter(root);


    printf("Diameter of the binary tree: %d\n", treeDiameter);

    return 0;
}
